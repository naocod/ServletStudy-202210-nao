HTTP 프로토콜로 데이터를 주고받기 위해서는 아래와 같이 요청(Request)을 보내고 응답(Response)을 받아야 한다.
=> 단방향 특성이 있음. 요청을 보내야지만 응답을 받을 수 있다.




오류 > consol창 확인~!

* 2xx - 성공
200 : GET 요청에 대한 성공
201 : CREAT
204 : No Content. 성공했으나 응답 본문에 데이터가 없음
205 : Reset Content. 성공했으나 클라이언트의 화면을 새로 고침하도록 권고
206 : Partial Conent. 성공했으나 일부 범위의 데이터만 반환

* 3xx - 리다이렉션
300번대의 상태 코드는 대부분 클라이언트가 이전 주소로 데이터를 요청하여 서버에서 새 URL로 리다이렉트를 유도하는 경우

301 : Moved Permanently, 요청한 자원이 새 URL에 존재
302 : redirect
303 : See Other, 요청한 자원이 임시 주소에 존재
304 : Not Modified, 요청한 자원이 변경되지 않았으므로 클라이언트에서 캐싱된 자원을 사용하도록 권고. ETag와 같은 정보를 활용하여 변경 여부를 확인

* 4xx - 클라이언트 에러
400번대 상태 코드는 대부분 클라이언트의 코드가 잘못된 경우입니다. 유효하지 않은 자원을 요청했거나 요청이나 권한이 잘못된 경우 발생합니다. 가장 익숙한 상태 코드는 404 코드입니다. 요청한 자원이 서버에 없다는 의미죠.

400 : Bad Request, 잘못된 요청
401 : Unauthorized, 권한 없이 요청. Authorization 헤더가 잘못된 경우
403 : Forbidden, 서버에서 해당 자원에 대해 접근 금지 / 권한이 없는데 클라이언트가 들어감에 따라 생기는 오류
405 : Method Not Allowed, 허용되지 않은 요청 메서드 / post를 요청해야하는데 get요청 하는 경우 (클라이언트가 요청 날림)
409 : Conflict, 최신 자원이 아닌데 업데이트하는 경우. ex) 파일 업로드 시 버전 충돌
415 : 데이터의 타입이 잘못된 경우 / int로 데이터를 보냈는데 string으로 받아야하는 경우

* 5xx - 서버 에러
500번대 상태 코드는 서버 쪽에서 오류가 난 경우입니다. / 예외가 터진 경우 거의 500번대 오류. 서버가 서로 소통이 안되거나 오류를 내는 경우이다.

501 : Not Implemented, 요청한 동작에 대해 서버가 수행할 수 없는 경우 
503 : Service Unavailable, 서버가 과부하 또는 유지 보수로 내려간 경우

Connectless & Stateless
HTTP는 Connectless 방식으로 작동한다. 서버에 연결하고, 요청해서 응답을 받으면 연결을 끊어버린다.


//https://velog.io/@dnjscksdn98/HTTP-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC
Request
Response
> 둘다 HEADER와 BODY로 구성됨.
HEADER는 요청할때의 정보를 담고 있음 / URL
BODY > 응답데이터들이 모여있음


ctrl + shift + O > 필요한/필요없는 import 정리

Window > preference > keys : 단축키
Window > preference > encoding : UTF-8로 변경해야 함

QueryString - 확인하는 용도
 > ?를 기점으로 뒤에는 QueryString이다.
 - req.getParameter("---") get요청에서만 사용함 value에 따른 키 값을 보여줌
 
req 이전의 주소는 프로젝트 파일 경로


request > 담을 때
response > 보내줄 때



* html 파일 자체를 응답 받을 수 있다 / 위쪽의 src는 java package 밑의 src는 html

주소창에 webapp 폴더의 파일명(경로)을 입력하면 직접 가져올 수 있음

- webapp > WEB-INF > 아무나 접근할 수 없게 끔 해당 폴더 안에 만듬
서버 안에서만 접근 가능하며(ex>변수-private) 클라이언트가 절대 접근할 수 없는 폴더(영역)이기에 WEB-INF안의 파일은 가져올 수 없음
 => servelt을 통해 doGet메소드를 호출하여 응답으로 WEB-INF안의 html 폴더를 가져올 수 있음
 	ex > request.getRequestDispatcher("/WEB-INF/test1.html").forward(request, response); /(절대경로)로 시작해야함
 		getRequestDispatcher > 요청이 들어왔을 때 해당 page로 html을 응답해줌 / java 폴더 안에서(내부에서) 접근하기 때문에 요청 가능함
 		응답할 때 forward/ doGet 요청이 들어왔을 때 
 		html 파일을 해석해서 응답까지 이어줌

상대경로 > 지금 현재 나의 상태에서 주소를 어떻게 옮길지에 대한 경로
절대경로 > 앞에거 무시하고 내가 지정한거부터 다시

프로젝트 > Properties > WebProjectSetting


servers > tomcat에서 server를 지우고 다시 올리면 프로젝트에서 Web Project Settings에서 설정한 Context root를 기준으로 바뀜


href > get요청. 주소창을 통해 요청을 날림
get 요청은 주소창에 다 나옴
get > 문자열의 길이 만큼 전달할 수 있는 제한이 있으며 주소창에 사용자가 입력한 내용이 그대로 나타나는 특징이 있다.
post > 입력한 내용의 길이에 제한받지 않고 입력한 내용도 드러나지 않음
action > <form>태그 안의 내용을 처리해 줄 서버 프로그램을 지정함

submit > input 태그 안에 있는 것들이 같이 날라가는데 method를 통해 get/post 요청 지정 가능

키값 > name="---" > ---
getParameter > String으로 받기 때문에 숫자로 쓰고싶다면 형변환을 해야 함.

response가 아닌 request 요청하면서 깨짐.
요청데이터를 가져오는 곳에는 인코딩이 되어있지 않기 때문에 
> request에서 setCharacerEncoding을 통해 UTF-8 인코딩해줘야함



===========================================================================================
12/01

[ 저장소 ]

세션
쿠키
프리페션 저장소?
자바스크립트


* 클라이언트 / 서버
클라이언트
	- local Storage 저장소
	- cookie 저장소

서버
	filter를 거침. servlet을 들어가기 전에 fiter를 설정하면 들어갔다가 나옴. 주소값이 전달됨
	
	- 어플리케이션 저장소 > 전역 모든 ?? 공유
		c1, c2가 들어와도 전역으로 다 씀
		생명주기 - 서버가 터지거나 꺼질 때 까지 살아있음
		클라이언트의 정보를 담지 않음, 서버의 중요한 정보를 담음
		
	- 세션 저장소 > 클라이언트(c1, c2)에 키값(session ID)을 주면 각각의 세션들마다 저장소를 따로 만듬
		계속 살아있음. / 처음엔 ID가 없고 다음에 request 객체 안에 ID카드(요청데이터)를 들고가면 인식함  ID카드가 일치하는 저장소는 계속 살아있음
		생명주기 - 만료시간이 존재함. ID를 들고가더라도 소멸되었기에 사용할 수 없음, 
				   브라우저(클라이언트)의 프로세서(프로그램)가 완전히 종료되면 session ID가 날라감 > chrome을 다시 띄우는 순간 초기화 / tap(스레드)을 끄는 것은 상관없음 > 하나의 프로레서 안에 있기 때문에 공유되어 만료되지 않음
				   ex) 은행 로그인 시 만료시간이 지나면session이 날라감
				   ** 기본적으로 초기값 30분으로 설정되어 있음
				   
				   JSESSIONID=5A2E53E8A7D152DB932B91E4C673D20F와 같이 ID가 있으면 같은 키값을 가진 저장소의 권한을 허락해줌
		> 다시 ID 발급
		[session]
			.c1
			.c2
			
	- request 저장소 > 매번 요청때마다 저장되는 임시 저장소 요청부터 응답이 되기 전까지 살아있음(생명주기) 응답이 되면 소멸됨


* Filter
	init 한번 호출
	destroy 한번 호출
	doFilter 계속 호출
	
	- 요청이 들어오면 매번 실행되는 것

요청
	- 필터 > Form1 실행 > request 저장소에서 데이터를 가져옴 > 응답되는 순간 객체 사라짐

	- jsp
	이름: <%=request.getAttribute("name") %> // 일반 표현식
	이름2: ${name} // El표현식


* 쿠키
	- 클라이언트에 있음, 쿠키에서 쿠키 저장소를 서버로 넘겨줌 서버에서 response로 응답할때 cookie 저장소에 쿠키를 추가할 수 있음 
		> 쿠키를 클라이언트에서 들고있으며 크롬이라는 프로그램 자체가 쿠키를 들고있기 때문에 서버를 닫더라도 확인할 수 있음
	요청 데이터에서 쿠키를 꺼내볼 수 있음
	
	- 무조건 string 값만 저장됨
	- 쿠키에는 띄어쓰기 쓰면 안됨
	# 쿠키이름 : 알파벳과 숫자로만 이루어져 있고, $로 시작할 수 없으며, 콤마, 세미콜론, 공백
                    등의 문자를 포함 불가. 
	# 쿠키값 : 공백, 괄호, 등호, 콤마, 콜론, 세미콜론을 포함할 수 없으며 이들 값을 포함하려면
                 인코딩이 필요.
               
                 * 넣을때는 인코딩 꺼낼때는 디코딩
                 	그래서 쿠키를 굽기 전에 URLEncoder.encode(cookieValue, "UTF-8") 을 하고
					쿠키를 가져온 다음에 URLDecoder.decode(cookieValue, "UTF-8") 을 해서 해결했다.
                 
	-setMaxAge :  1 -> 1초 만료시간 설정



=========================================================================
12/2

post로 들어오면 request 객체를 set하면됨

ServletRequest / HttpServletRequest
상위객체에 생성하여 하위객체에서 사용 불가 ??


GET
필터1 실행됨!!!
POST
필터1 실행됨!!!
(아이디)
(비밀번호)

submit > post요청



=========================================================================
12/5

* <form action="/auth/register" method="post">에는 http://localhost:8000가 생략되어있음


tomcat으로 request 정보가 감 > httpServletRequest 객체 생성
톰캣은 요청 주소를 보고 해당 클래스를 찾아감 
필터를 거침
ServletRequest로 업캐스팅되어 getMethod를 사용할 수 없어 다운캐스팅하여 getMethod 사용


* 캐시

* AJAX
http://www.tcpschool.com/ajax/ajax_intro_basic


==========================================================================
12/6

클라이언트랑 서버랑 제이슨을 통해 데이터를 주고 받음 (구글에서 만든 gson)


json 내장객체 







































